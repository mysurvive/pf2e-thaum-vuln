import { createEffectOnTarget } from "../../socket";
import {
  BREACHED_DEFENSES_EFFECT_UUID,
  BREACHED_DEFENSES_TARGET_UUID,
  GLIMPSE_VULNERABILITY_EFFECT_UUID,
  GLIMPSE_VULNERABILITY_TARGET_UUID,
  MORTAL_WEAKNESS_EFFECT_UUID,
  MORTAL_WEAKNESS_TARGET_UUID,
  PERSONAL_ANTITHESIS_EFFECT_UUID,
  PERSONAL_ANTITHESIS_TARGET_UUID,
} from "../../utils";
import { createEffectData, hasFeat } from "../../utils/helpers";
import { createBreachedDefenses } from "../breachedDefenses";
import { createEsotericWarden } from "../esotericWarden";
import { getSVTargets } from "../sympatheticVulnerabilities";
import { createUWDialog } from "../ubiquitousWeakness";

/**
 * Creates the Personal Antithesis effect on the thaumaturge
 * @param {*} actor
 * @param {*} target
 * @param {Number} rollDOS
 * @param {Object} data
 */
async function createPAOnActor(actor, target, rollDOS, data) {
  let eff = await createEffectData(PERSONAL_ANTITHESIS_EFFECT_UUID, {
    actor: actor.uuid,
  });

  const hasSympatheticVulnerabilities = hasFeat(
    actor,
    "sympathetic-vulnerabilities"
  );
  const useEVAutomation = game.settings.get(
    "pf2e-thaum-vuln",
    "useEVAutomation"
  );
  const evMode = "personal-antithesis";
  const ewPredicate = "personal-antithesis-target";

  if (hasFeat(actor, "esoteric-warden") && rollDOS > 1) {
    createEsotericWarden(rollDOS, ewPredicate, actor, target);
  }

  let evTargets = new Array();

  if (hasSympatheticVulnerabilities && useEVAutomation) {
    evTargets = evTargets.concat(getSVTargets(target, eff, data));
  }

  if (!evTargets.includes(target.actor.uuid)) {
    evTargets.push(target.actor.uuid);
  }

  evTargets = [...new Set(evTargets)];

  const targEffect = await createEffectData(PERSONAL_ANTITHESIS_TARGET_UUID, {
    actor: actor.uuid,
  });
  targEffect.flags["pf2e-thaum-vuln"] = { EffectOrigin: actor.uuid };
  targEffect.system.slug =
    targEffect.system.slug + "-" + game.pf2e.system.sluggify(actor.name);

  eff.flags["pf2e-thaum-vuln"] = { EffectOrigin: actor.uuid };
  await createEffectOnTarget(actor, targEffect, evTargets);

  await setEVFlags({
    actor: actor,
    targets: evTargets,
    primary: target,
    mode: evMode,
  });

  await actor.createEmbeddedDocuments("Item", [eff]);
}

/**
 * Creates the Mortal Weakness effect on the thaumaturge
 * @param {*} actor
 * @param {*} target
 * @param {Number} rollDOS
 * @param {Object} data
 */
async function createMWOnActor(actor, target, rollDOS, data) {
  const ADJUSTMENT_TYPES = (({ traits, materials, damageTypes, ...o }) => {
    o;
    const dTypes = Object.keys(damageTypes.data);
    for (const trait in traits.data) {
      if (dTypes.includes(trait)) {
        delete traits.data[trait];
      }
    }
    return { traits: traits, materials: materials };
  })(game.pf2eThaumVuln.ADJUSTMENTS.ADJUSTMENT_TYPES);

  let eff = await createEffectData(MORTAL_WEAKNESS_EFFECT_UUID, {
    actor: actor.uuid,
  });

  const hasSympatheticVulnerabilities = hasFeat(
    actor,
    "sympathetic-vulnerabilities"
  );
  const useEVAutomation = game.settings.get(
    "pf2e-thaum-vuln",
    "useEVAutomation"
  );
  const evMode = "mortal-weakness";
  const ewPredicate = "mortal-weakness-target";
  const iwrData = data.value;

  if (hasFeat(actor, "esoteric-warden") && rollDOS > 1) {
    createEsotericWarden(rollDOS, ewPredicate, actor, target);
  }

  let evTargets = new Array();

  if (hasSympatheticVulnerabilities && useEVAutomation) {
    evTargets = evTargets.concat(getSVTargets(target, eff, data));
  }

  if (!evTargets.includes(target.actor.uuid)) {
    evTargets.push(target.actor.uuid);
  }

  evTargets = [...new Set(evTargets)];

  const traitTypes = (() => {
    for (const types in ADJUSTMENT_TYPES) {
      if (Object.keys(ADJUSTMENT_TYPES[types].data).includes(data.type)) {
        return { traitType: data.type, categoryType: types };
      }
    }
  })();

  const targEffect = await createEffectData(MORTAL_WEAKNESS_TARGET_UUID, {
    actor: actor.uuid,
  });
  targEffect.flags["pf2e-thaum-vuln"] = { EffectOrigin: actor.uuid };
  targEffect.system.slug =
    targEffect.system.slug + "-" + game.pf2e.system.sluggify(actor.name);

  eff.flags["pf2e-thaum-vuln"] = { EffectOrigin: actor.uuid };

  if (traitTypes) {
    eff.system.rules.push({
      definition: [{ or: ["item:type:weapon", "item:trait:unarmed"] }],
      key: "AdjustStrike",
      mode: "add",
      property: traitTypes.categoryType,
      value: traitTypes.traitType,
      slug: `mortal-weakness-${traitTypes.traitType}`,
      predicate: [
        {
          or: [
            "target:mark:exploit-vulnerability",
            `target:effect:mortal-weakness-target-${game.pf2e.system.sluggify(
              actor.name
            )}`,
          ],
        },
      ],
    });

    targEffect.system.rules = [];
  }
  if (hasFeat(actor, "ubiquitous-weakness")) {
    createUWDialog(eff);
  }

  await setEVFlags({
    actor: actor,
    targets: evTargets,
    primary: target,
    mode: evMode,
  });

  await createEffectOnTarget(actor, targEffect, evTargets, iwrData);

  await actor.createEmbeddedDocuments("Item", [eff]);
}

/**
 * Creates the Breached Defenses effect on the thaumaturge
 * @param {*} actor
 * @param {*} target
 * @param {Number} rollDOS
 * @param {Object} data
 */
async function createBDOnActor(actor, target, rollDOS, data) {
  let eff = await createEffectData(BREACHED_DEFENSES_EFFECT_UUID, {
    actor: actor.uuid,
  });

  const evMode = "breached-defenses";
  const ewPredicate = "breached-defenses-target";

  await createBreachedDefenses(actor, eff, data);

  if (hasFeat(actor, "esoteric-warden") && rollDOS > 1) {
    createEsotericWarden(rollDOS, ewPredicate, actor, target);
  }

  const evTargets = [target.actor.uuid];

  const targEffect = await createEffectData(BREACHED_DEFENSES_TARGET_UUID, {
    actor: actor.uuid,
  });
  targEffect.flags["pf2e-thaum-vuln"] = { EffectOrigin: actor.uuid };
  targEffect.system.slug =
    targEffect.system.slug + "-" + game.pf2e.system.sluggify(actor.name);

  eff.flags["pf2e-thaum-vuln"] = { EffectOrigin: actor.uuid };

  await setEVFlags({
    actor: actor,
    targets: evTargets,
    primary: target,
    mode: evMode,
  });

  await createEffectOnTarget(actor, targEffect, evTargets, data);

  await actor.createEmbeddedDocuments("Item", [eff]);
}

/**
 * Creates the Glimpse Vulnerability effect on an actor with the Thaumaturge Dedication and their Glimpse Vulnerability target
 * @param {*} actor
 * @param {*} target
 * @param {Object} data
 */
async function createGWOnActor(actor, target, data) {
  let eff = await createEffectData(GLIMPSE_VULNERABILITY_EFFECT_UUID, {
    actor: actor.uuid,
  });

  const targEffect = await createEffectData(GLIMPSE_VULNERABILITY_TARGET_UUID, {
    actor: actor.uuid,
  });
  targEffect.flags["pf2e-thaum-vuln"] = { EffectOrigin: actor.uuid };
  targEffect.system.slug =
    targEffect.system.slug + "-" + game.pf2e.system.sluggify(actor.name);

  eff.flags["pf2e-thaum-vuln"] = { EffectOrigin: actor.uuid };

  await setEVFlags({
    actor: actor,
    targets: [target.actor.uuid],
    primary: target,
    mode: "glimpse-vulnerability",
  });

  await createEffectOnTarget(actor, targEffect, [target.actor.uuid], data);

  await actor.createEmbeddedDocuments("Item", [eff]);
}

/**
 * Sets the flags for Exploit Vulnerability on the thaumaturge
 * @param {*} data
 */
async function setEVFlags(data) {
  const { actor, targets, primary, mode } = data;
  await actor.setFlag("pf2e-thaum-vuln", "effectSource", actor.uuid);
  await actor.setFlag("pf2e-thaum-vuln", "activeEV", true);
  await actor.setFlag("pf2e-thaum-vuln", "EVTargetID", targets);
  await actor.setFlag("pf2e-thaum-vuln", "EVMode", `${mode}`);
  await actor.setFlag("pf2e-thaum-vuln", "primaryEVTarget", primary.actor.uuid);
}

export { createBDOnActor, createPAOnActor, createMWOnActor, createGWOnActor };
