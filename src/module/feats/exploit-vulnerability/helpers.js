import { createEffectOnTarget } from "../../socket";
import {
  BREACHED_DEFENSES_EFFECT_UUID,
  BREACHED_DEFENSES_TARGET_UUID,
  MORTAL_WEAKNESS_EFFECT_UUID,
  MORTAL_WEAKNESS_TARGET_UUID,
  PERSONAL_ANTITHESIS_EFFECT_UUID,
  PERSONAL_ANTITHESIS_TARGET_UUID,
} from "../../utils";
import {
  BDGreatestBypassableResistance,
  createEffectData,
  getGreatestIWR,
  getIWR,
  getMWTargets,
  hasFeat,
} from "../../utils/helpers";
import { createBreachedDefenses } from "../breachedDefenses";
import { createEsotericWarden } from "../esotericWarden";
import { getSVTargets } from "../sympatheticVulnerabilities";
import { createUWDialog } from "../ubiquitousWeakness";

const effectPairing = {
  "mortal-weakness": MORTAL_WEAKNESS_TARGET_UUID,
  "personal-antithesis": PERSONAL_ANTITHESIS_TARGET_UUID,
  "breached-defenses": BREACHED_DEFENSES_TARGET_UUID,
};

//Creates the passed effect document on the actor
async function createEffectOnActor(sa, t, effectUuid, rollDOS) {
  await sa.setFlag("pf2e-thaum-vuln", "primaryEVTarget", t.actor.uuid);
  let eff = await createEffectData(effectUuid, { actor: sa.uuid });
  let evMode, EWPredicate;

  const gIWR = getGreatestIWR(t.actor.attributes.weaknesses);
  const useEVAutomation = game.settings.get(
    "pf2e-thaum-vuln",
    "useEVAutomation"
  );
  const hasEsotericWarden = hasFeat(sa, "esoteric-warden");
  const hasUbiquitousWeakness = hasFeat(sa, "ubiquitous-weakness");
  const hasSympatheticVulnerabilities = hasFeat(
    sa,
    "sympathetic-vulnerabilities"
  );

  let evTargets = new Array();
  if (eff.flags.core.sourceId === MORTAL_WEAKNESS_EFFECT_UUID) {
    EWPredicate = "mortal-weakness-target";
    if (getIWR(t).weaknesses.length === 0) {
      return ui.notifications.warn(
        game.i18n.localize(
          "pf2e-thaum-vuln.notifications.warn.mortalWeakness.noWeakness"
        )
      );
    }
    if (useEVAutomation) {
      evTargets = getMWTargets(t);
      if (hasSympatheticVulnerabilities) {
        evTargets = evTargets.concat(getSVTargets(t, eff, gIWR));
      }
    }

    evMode = "mortal-weakness";
  } else if (eff.flags.core.sourceId === PERSONAL_ANTITHESIS_EFFECT_UUID) {
    if (hasSympatheticVulnerabilities && useEVAutomation) {
      evTargets = evTargets.concat(getSVTargets(t, eff, gIWR));
    }
    EWPredicate = "personal-antithesis-target";
    evMode = "personal-antithesis";

    //breached defenses logic. It mostly works.... there are a few weird cases where it doesn't work such as when the highest
    //resistance that can be bypassed is a combination of two traits (see adamantine golem's resistance bypass from vorpal-adamantine)
    //or if the trait that bypasses it is not in the system/on my list
  } else if (eff.flags.core.sourceId === BREACHED_DEFENSES_EFFECT_UUID) {
    const bypassable = BDGreatestBypassableResistance(t);
    await createBreachedDefenses(sa, eff, bypassable);
    EWPredicate = "breached-defenses-target";
    evMode = "breached-defenses";
  }

  if (hasEsotericWarden && rollDOS > 1) {
    createEsotericWarden(rollDOS, EWPredicate, sa, t);
  }

  if (!evTargets.includes(t.actor.uuid)) {
    evTargets.push(t.actor.uuid);
  }
  //makes sure we don't have duplicates in the target array
  evTargets = [...new Set(evTargets)];
  let iwrData = getIWR(t);
  if (iwrData.weaknesses.length != 0) {
    iwrData = getGreatestIWR(iwrData.weaknesses)?.value;
  }

  const targEffect = await createEffectData(effectPairing[evMode], {
    actor: sa.uuid,
  });
  targEffect.flags["pf2e-thaum-vuln"] = { EffectOrigin: sa.uuid };
  targEffect.system.slug =
    targEffect.system.slug + "-" + game.pf2e.system.sluggify(sa.name);

  eff.flags["pf2e-thaum-vuln"] = { EffectOrigin: sa.uuid };
  await createEffectOnTarget(sa, targEffect, evTargets, iwrData);

  await sa.setFlag("pf2e-thaum-vuln", "effectSource", sa.uuid);
  await sa.setFlag("pf2e-thaum-vuln", "activeEV", true);
  await sa.setFlag("pf2e-thaum-vuln", "EVTargetID", evTargets);
  await sa.setFlag("pf2e-thaum-vuln", "EVMode", `${evMode}`);

  await sa.createEmbeddedDocuments("Item", [eff]);
  if (hasUbiquitousWeakness && evMode === "mortal-weakness") {
    createUWDialog(eff);
  }
}
export { createEffectOnActor };
