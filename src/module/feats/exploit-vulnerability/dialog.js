import {
  BDGreatestBypassableResistance,
  getGreatestIWR,
  getIWR,
} from "../../utils/helpers.js";
import {
  PERSONAL_ANTITHESIS_EFFECT_UUID,
  MORTAL_WEAKNESS_EFFECT_UUID,
  BREACHED_DEFENSES_SOURCEID,
  BREACHED_DEFENSES_EFFECT_UUID,
} from "../../utils/index.js";
import { createEffectOnActor } from "./helpers.js";

//Creates the dialog box when a success or crit success on Esoteric Lore is rolled
async function createEVDialog(sa, t, rollDOS) {
  const paDmg = 2 + Math.floor(sa.level / 2);
  const iwrContent = createIWRContent(rollDOS, t);

  let dgContent =
    `<p>${game.i18n.localize(
      "pf2e-thaum-vuln.exploitVulnerability.dialog.prompt"
    )}</p><br>` +
    iwrContent +
    `<p>${
      game.i18n.localize(
        "pf2e-thaum-vuln.exploitVulnerability.dialog.paBonusLabel"
      ) + paDmg
    }</p>`;

  let dgBtns = {
    pa: {
      label: game.i18n.localize("pf2e-thaum-vuln.personalAntithesis.name"),
      callback: () => {
        createEffectOnActor(sa, t, PERSONAL_ANTITHESIS_EFFECT_UUID, rollDOS);
      },
    },
    mw: {
      label: game.i18n.localize("pf2e-thaum-vuln.mortalWeakness.name"),
      callback: () => {
        createEffectOnActor(sa, t, MORTAL_WEAKNESS_EFFECT_UUID, rollDOS);
      },
    },
  };
  if (
    sa.itemTypes.feat.some((f) => f.sourceId === BREACHED_DEFENSES_SOURCEID) &&
    (rollDOS === 2 || rollDOS === 3)
  ) {
    const tRes = getIWR(t).resistances;
    let gBD;
    let exceptionFlag = 0;
    for (const resistance of tRes) {
      if (resistance.exceptions.length > 0) {
        exceptionFlag++;
      }
    }
    if (tRes.length != 0 && exceptionFlag > 0) {
      gBD = game.i18n.format("pf2e-thaum-vuln.breachedDefenses.bypassLine", {
        type: BDGreatestBypassableResistance(t)?.type,
        exception: BDGreatestBypassableResistance(t)?.exceptions,
      });
      dgBtns = {
        ...dgBtns,
        bd: {
          label: game.i18n.localize("pf2e-thaum-vuln.breachedDefenses.name"),
          callback: () => {
            createEffectOnActor(sa, t, BREACHED_DEFENSES_EFFECT_UUID);
          },
        },
      };
    } else {
      gBD = game.i18n.localize("pf2e-thaum-vuln.dialog.none");
    }

    dgContent =
      dgContent +
      game.i18n.localize("pf2e-thaum-vuln.breachedDefenses.bypassableLabel") +
      gBD +
      "<p>";
  }
  new Dialog({
    title: game.i18n.localize("pf2e-thaum-vuln.exploitVulnerability.name"),
    content: () => dgContent,
    buttons: dgBtns,
    default: "pa",
    render: () => {},
    close: () => {},
  }).render(true);
}

//Creates the IWR content box content
function createIWRContent(rollDOS, a) {
  let iwrContent;
  const mystifyNumbers = game.settings.get("pf2e-thaum-vuln", "mystifyNumbers");
  const iwrData = getIWR(a);
  if (rollDOS === 2) {
    let weakness =
      iwrData.weaknesses.length == 0
        ? game.i18n.localize("pf2e-thaum-vuln.dialog.none")
        : `${getGreatestIWR(iwrData.weaknesses)?.type} `;
    if (!mystifyNumbers || rollDOS === 3) {
      weakness = weakness + `- ${getGreatestIWR(iwrData.weaknesses)?.value}`;
    }
    iwrContent = `<p>${game.i18n.localize(
      "pf2e-thaum-vuln.exploitVulnerability.dialog.highestWeaknessLabel"
    )}: ${weakness}</p>`;
  }
  if (rollDOS === 3) {
    let weakness =
      iwrData.weaknesses.length == 0
        ? game.i18n.localize("pf2e-thaum-vuln.dialog.none")
        : stitchIWR(iwrData.weaknesses, rollDOS);
    let resist =
      iwrData.resistances.length == 0
        ? game.i18n.localize("pf2e-thaum-vuln.dialog.none")
        : stitchIWR(iwrData.resistances, rollDOS);
    let immune =
      iwrData.immunities.length == 0
        ? game.i18n.localize("pf2e-thaum-vuln.dialog.none")
        : stitchIWR(iwrData.immunities, rollDOS);
    iwrContent = `<div class="grid-container"><div class="grid-item"><p>${game.i18n.localize(
      "pf2e-thaum-vuln.exploitVulnerability.dialog.weaknessLabel"
    )}<ul>${weakness}</ul></p></div><div class="grid-item"><p>${game.i18n.localize(
      "pf2e-thaum-vuln.exploitVulnerability.dialog.resistanceLabel"
    )}<ul>${resist}</ul></p></div><div class="grid-item"><p>${game.i18n.localize(
      "pf2e-thaum-vuln.exploitVulnerability.dialog.immunityLabel"
    )}<ul>${immune}</ul></p></div></div>`;
  }
  return iwrContent;
}

//stitches together the IWR information to help create the content for the dialog box
function stitchIWR(p, rollDOS) {
  const mystifyNumbers = game.settings.get("pf2e-thaum-vuln", "mystifyNumbers");
  let s = "";
  for (const n of p) {
    if (n.value) {
      !mystifyNumbers || rollDOS === 3
        ? (s = s + `<li>${n.type} - ${n.value}</li>`)
        : (s = s + `<li>${n.type}</li>`);
      if (n.exceptions.length != 0) {
        s =
          s +
          game.i18n.localize(
            "pf2e-thaum-vuln.exploitVulnerability.dialog.except"
          );
        for (const e of n.exceptions) {
          if (e === n.exceptions[n.exceptions.length - 1]) {
            s = s + `${e}`;
          } else {
            s = s + `${e}, `;
          }
        }
        s = s + "<br>";
      }
      if (n.doubleVs == "") {
        n.doubleVs = false;
      }
      if (n.doubleVs) {
        s =
          s +
          game.i18n.localize(
            "pf2e-thaum-vuln.exploitVulnerability.dialog.doublevs"
          );
        for (const d of n.doubleVs) {
          if (d === n.doubleVs[n.doubleVs.length - 1]) {
            s = s + `${d}`;
          } else {
            s = s + `${d}, `;
          }
        }
      }
    } else {
      s = s + `<li>${n.type}</li>`;
      if (n.exceptions.length != 0) {
        s =
          s +
          game.i18n.localize(
            "pf2e-thaum-vuln.exploitVulnerability.dialog.except"
          );
        for (const e of n.exceptions) {
          if (e === n.exceptions[n.exceptions.length - 1]) {
            s = s + `${e}`;
          } else {
            s = s + `${e}, `;
          }
        }
      }
    }
  }
  return s;
}

export {
  BDGreatestBypassableResistance,
  stitchIWR,
  createIWRContent,
  createEVDialog,
};
